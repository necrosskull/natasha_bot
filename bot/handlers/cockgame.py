import datetime
import random

from telegram import constants, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, ConversationHandler, CallbackQueryHandler

import bot.config as config
import bot.db.fetch as fetch
from bot.handlers.handler import send_and_delete_message
from bot.handlers.scheduler import delete_message

from bot.db.sqlite import TgBotGame, db

COCKUNLOCK = range(1)


async def cock_game(update, context):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏—Ö '—Ö—É—è' (—à—É—Ç–ª–∏–≤–∞—è –∏–≥—Ä–∞).
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –æ–¥–∏–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞. –ò–≥—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è,
    —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∏–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ —Ä–∞–∑–º–µ—Ä –∏—Ö —Ö—É—è. –ó–∞—Ç–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö—É—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –≤–º–µ—Å—Ç–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –±—ã–ª–∞ —Å—ã–≥—Ä–∞–Ω–∞.
    """

    if str(update.message.chat.id) not in config.AUTHORIZED_USERS:
        return

    username = update.message.from_user.username if update.message.from_user.username \
        else update.message.from_user.first_name
    thread_id = update.message.message_thread_id if update.message.is_topic_message else None
    user_id = update.message.from_user.id
    user_message_id = update.message.message_id

    cock_time = fetch.get_value_by_id(user_id, 'cock_time')
    cock_time, time_left = check_cock_time(user_id, cock_time)

    if cock_time:
        message_text = f'‚ùå –£–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –¥–ª–∏–Ω—É —Ö—É—è –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!\n' \
                       f'üïê –û—Å—Ç–∞–ª–æ—Å—å {time_left}'

        await send_and_delete_message(context, update.effective_chat.id, thread_id, user_message_id,
                                      message_text, reply=True, rm_button=user_id,
                                      parse_mode=constants.ParseMode.MARKDOWN)
        return

    cock_size = fetch.get_value_by_id(user_id, 'cock')

    modes = [cock_multiply(cock_size), cock_plus(cock_size)]
    new_size, msg, num = random.choices(modes, weights=[0.2, 0.8], k=1)[0]

    timestamp = datetime.datetime.now()

    if cock_size is not None:

        db.connect()
        table = TgBotGame.get_by_id(user_id)
        table.username = username
        table.cock = new_size
        table.cock_time = timestamp
        table.save()
        db.close()

    else:

        db.connect()
        TgBotGame.create(
            id=user_id,
            username=username,
            cock=new_size,
            cock_time=timestamp
        )
        db.close()

    if num > 0:
        sign = "üìà"
    else:
        sign = "üìâ"

    if num == 0:
        message_text = f"{sign} –¢–≤–æ–π —Ö—É–π {msg}\n‚ò†Ô∏è –¢–µ–ø–µ—Ä—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä *{new_size} c–º.*" \
                       f"\nüòà –†–∞–∑–º–µ—Ä –æ—Ç–ø–∞–≤—à–µ–≥–æ –±—ã–ª *{cock_size} —Å–º.*"

        cockdrop = fetch.get_value_by_id(user_id, 'cockdrop')

        if cockdrop is not None:
            if cock_size > cockdrop:
                db.connect()
                table = TgBotGame.get_by_id(user_id)
                table.cockdrop = cock_size
                table.save()
                db.close()

        else:

            db.connect()
            table = TgBotGame.get_by_id(user_id)
            table.cockdrop = cock_size
            table.save()
            db.close()

    else:
        message_text = f"{sign} –¢–≤–æ–π —Ö—É–π {msg}\nüçÜ –¢–µ–ø–µ—Ä—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä *{new_size} c–º.*" \
                       f"\nüïê –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!"

    await send_and_delete_message(context, update.effective_chat.id, thread_id, user_message_id,
                                  message_text,
                                  parse_mode=constants.ParseMode.MARKDOWN, reply=True, delete=False, rm_button=user_id)


def check_cock_time(user_id, cock_time):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É 'cock_game', –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–≥—Ä–∞–ª –≤ –∏–≥—Ä—É –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ –∏–≥—Ä—É, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    :param cock_time:
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–≥—Ä—ã.
    :return: –ö–æ—Ä—Ç–µ–∂, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å,
             False - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ), –∞ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç - —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã,
             –ª–∏–±–æ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª.
    """

    if cock_time is not None:

        current_time = datetime.datetime.now()
        time_diff = current_time - cock_time

        if time_diff >= datetime.timedelta(hours=24):
            cock_time = None

            db.connect()
            table = TgBotGame.get_by_id(user_id)
            table.cock_time = cock_time
            table.save()
            db.close()

            return False, None

        else:
            remain = datetime.timedelta(hours=24) - time_diff

            hours = remain.seconds // 3600
            minutes = (remain.seconds % 3600) // 60
            seconds = remain.seconds % 60

            time_left = f"{hours:02d}:{minutes:02d}:{seconds:02d}"

            return True, time_left

    else:
        return False, None


def cock_plus(cock_size):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö—É—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä —Ö—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.
    :param cock_size: –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ö—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö—É—è, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞,
             –∏ —á–∏—Å–ª–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è).
    """

    num = random.choices([random.randint(1, 20), random.randint(-20, -1)], weights=[0.8, 0.2], k=1)[0]
    if num < 0:
        if cock_size and cock_size >= 100 and random.random() < 0.2:
            new_size = 0
            msg = f"*–æ—Ç–≤–∞–ª–∏–ª—Å—è –∫ —Ö—É—è–º...*"
            num = 0
            return new_size, msg, num
        msg = f"*—É–º–µ–Ω—å—à–∏–ª—Å—è* –Ω–∞ *{abs(num)} —Å–º.*"

    else:
        msg = f"*—É–≤–µ–ª–∏—á–∏–ª—Å—è* –Ω–∞ *{num} —Å–º.*"
    if cock_size is not None:
        new_size = cock_size + num
    else:
        new_size = num
    return new_size, msg, num


def cock_multiply(cock_size):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö—É—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä —Ö—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 2.
    :param cock_size: –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ö—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö—É—è, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞,
             –∏ —á–∏—Å–ª–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–æ 2 –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ).
    """

    msg = f"*—É–≤–µ–ª–∏—á–∏–ª—Å—è* –≤ *2 —Ä–∞–∑–∞*"
    if cock_size is not None:
        if cock_size >= 0:
            new_size = cock_size * 2
        else:
            new_size = 0
            msg = f"*–≤—ã–ª–µ–∑ –∏–∑ –ø–∏–∑–¥—ã*"
    else:
        new_size = 0
    num = 2
    return new_size, msg, num


async def my_cock(update, context):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ö—É—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """

    if str(update.message.chat.id) not in config.AUTHORIZED_USERS:
        return

    thread_id = update.message.message_thread_id if update.message.is_topic_message else None
    user_id = update.message.from_user.id
    user_message_id = update.message.message_id

    cock_size = fetch.get_value_by_id(user_id, 'cock')
    cock_drop = fetch.get_value_by_id(user_id, 'cockdrop')

    if cock_size is None:
        message_text = f"‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ö—É—è!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cock —á—Ç–æ–±—ã –æ–Ω —É –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è!"

    else:
        if cock_drop:
            drop_msg = f"\n‚ò†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ç–≤–∞–ª–∏–≤—à–∏–π—Å—è —Ö—É–π *{cock_drop} —Å–º.*"
        else:
            drop_msg = ''

        message_text = f"üìè –î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Ö—É—è *{cock_size} —Å–º.*{drop_msg}"

    await send_and_delete_message(context, update.effective_chat.id, thread_id, user_message_id,
                                  message_text,
                                  parse_mode=constants.ParseMode.MARKDOWN, reply=True)


async def buy_cock(update, context):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã 'cock_game'.
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ 'score', –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è,
    –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–∞–ª–ª–æ–≤.
    """

    authorized_users = config.AUTHORIZED_USERS
    cock_price = config.cock_price

    chat_id = update.effective_chat.id

    if str(chat_id) not in authorized_users:
        return

    user_id = update.message.from_user.id
    thread_id = update.message.message_thread_id if update.message.is_topic_message else None
    user_message_id = update.message.message_id

    data = fetch.get_values_by_id(user_id, 'score', 'cock_time')

    if data:
        score, cock_time = data
    else:
        score, cock_time = None, None

    cooldown = check_cock_time(user_id, cock_time)

    if cooldown is None:
        message_text = '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–π–º–µ—Ä–∞, –µ–±–∞–Ω–∞—Ç.'
        await send_and_delete_message(context, chat_id, thread_id, user_message_id, message_text,
                                      parse_mode=constants.ParseMode.MARKDOWN, reply=True)
        return

    if score is None:
        message_text = '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å—á—ë—Ç–∞, –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫–µ!'

        await send_and_delete_message(context, chat_id, thread_id, user_message_id, message_text,
                                      parse_mode=constants.ParseMode.MARKDOWN, reply=True)
        return

    elif score >= cock_price:
        if 'f' in context.args:
            context.user_data['unlock_message_id'] = user_message_id
            return await reset_cock(update, context, firsttime=True, user_id=user_id)

        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f'buy {user_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'cancel {user_id}')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä —Ö—É—è –∑–∞ {cock_price} –±–∞–ª–ª–æ–≤?'

        message = await context.bot.send_message(chat_id, message_thread_id=thread_id, text=message_text,
                                                 reply_markup=reply_markup)
        context.user_data['unlock_message_id'] = user_message_id
        context.job_queue.run_once(delete_message, 120, data=(message.message_id, user_message_id), chat_id=chat_id)
        return COCKUNLOCK

    else:
        message_text = f'–ù–∞–¥–æ {cock_price} –±–∞–ª–ª–æ–≤, –±–æ–º–∂.'

    await send_and_delete_message(context, chat_id, thread_id, user_message_id, message_text,
                                  parse_mode=constants.ParseMode.MARKDOWN, reply=True)


async def cock_unlock(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã 'cock_game'.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–±—Ä–æ—Å, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±–∞–ª–ª—ã 'score' —É–º–µ–Ω—å—à–∞—é—Ç—Å—è.
    """

    cock_price = config.cock_price

    query = update.callback_query
    if str(query.data).startswith('r'):
        return

    user_id = query.from_user.id
    user_message_id = context.user_data['unlock_message_id']
    await query.answer()

    data_args = query.data.split(' ')

    if str(user_id) == data_args[1]:

        score = fetch.get_value_by_id(user_id, 'score')

        if score >= cock_price:
            button = data_args[0]

            if button == 'buy':
                await reset_cock(update, context, user_id=user_id, query=query)
            else:
                await query.delete_message()
                await context.bot.delete_message(update.effective_chat.id, user_message_id)

        else:
            message = await query.edit_message_text(text=f"–£ —Ç—è –¥–µ–Ω–µ–≥ –Ω–µ—Ç, –∏–¥–∏ –Ω–∞—Ö—É–π.")
            context.job_queue.run_once(delete_message, config.delete_timer, data=(message.message_id, user_message_id),
                                       chat_id=update.effective_chat.id)
            return


async def reset_cock(update, context, firsttime=None, user_id=None, query=None):
    score = fetch.get_value_by_id(user_id, 'score')
    user_message_id = context.user_data['unlock_message_id']
    cock_price = config.cock_price
    cooldown = None
    new_score = score - cock_price

    db.connect()
    table = TgBotGame.get_by_id(user_id)
    table.cock_time = cooldown
    table.score = new_score
    table.save()
    db.close()

    if firsttime:
        message = await context.bot.send_message(chat_id=update.effective_chat.id,
                                                 text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–∏–ª–∏ —Ç–∞–π–º–µ—Ä!\n–ò—Å–ø–æ–ª—å–∑—É–π /cock")

    else:
        message = await query.edit_message_text(text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–∏–ª–∏ —Ç–∞–π–º–µ—Ä!\n–ò—Å–ø–æ–ª—å–∑—É–π /cock")

    context.job_queue.run_once(delete_message, config.delete_timer,
                               data=(message.message_id, user_message_id),
                               chat_id=update.effective_chat.id)


async def send_leaderboard(update, context, desc=False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏–¥–µ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Ö —Ö—É—è,
    –ª–∏–±–æ –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –ª–∏–±–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
    :param update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram.
    :param desc: –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (True)
                 –∏–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (False).
    """

    if str(update.message.chat.id) not in config.AUTHORIZED_USERS:
        return

    thread_id = update.message.message_thread_id if update.message.is_topic_message else None
    user_message_id = update.message.message_id

    sort = True if desc else False

    db.connect()
    order_func = TgBotGame.cock.desc() if sort else TgBotGame.cock.asc()
    response = TgBotGame.select().order_by(order_func).limit(10)
    board = [(entry.username, entry.cock, entry.id) for entry in response]
    db.close()

    formatted_board = '\n'.join(
        f"{index + 1}) [{username}](https://t.me/{username}) | *{cock} —Å–º.*" for index, (username, cock, user_id) in
        enumerate(board))

    if len(formatted_board) < 1:
        formatted_board = f"–ù–µ—Ç –ø–∏—Å–µ–∫"

    leaderboard_type = "–¢–æ–ø 10 –ø–∏—Å–µ–∫" if desc else "–¢–æ–ø 10 –º–∏–∫—Ä–æ –ø–∏—Å–µ–∫"

    message_text = f'üèÜ {leaderboard_type}!\n\n{formatted_board}'

    await send_and_delete_message(context, update.effective_chat.id, thread_id, user_message_id,
                                  message_text,
                                  parse_mode=constants.ParseMode.MARKDOWN, disable_web_page_preview=True)


async def cock_leaderboard(update, context):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º '—Ö—É—è' –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è (–æ—Ç —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∫ —Å–∞–º–æ–º—É
    –º–∞–ª–µ–Ω—å–∫–æ–º—É).
    """

    await send_leaderboard(update, context, desc=True)


async def anti_cock_leaderboard(update, context):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∞–º—ã–º –º–∞–ª–µ–Ω—å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º '—Ö—É—è' –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–æ—Ç —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∫
    —Å–∞–º–æ–º—É –±–æ–ª—å—à–æ–º—É).
    """

    await send_leaderboard(update, context, desc=False)


def init_handler(application):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: '/cock', '/mycock', '/cocktop', '/cockantitop', '/cockreset'
    –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        application (telegram.ext.Application): –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None
    """
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('cockreset', buy_cock, block=False)],

        states={
            COCKUNLOCK: [
                CallbackQueryHandler(cock_unlock, block=False)]

        },
        fallbacks=[CommandHandler('cockreset', buy_cock, block=False)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('cock', cock_game, block=False))
    application.add_handler(CommandHandler('mycock', my_cock, block=False))
    application.add_handler(CommandHandler('cocktop', cock_leaderboard, block=False))
    application.add_handler(CommandHandler('cockantitop', anti_cock_leaderboard, block=False))
